#!/usr/bin/env node

// =============================================================================
// This script generates the documentation database as well as compiles the
// documentation JavaScript app.
// 
// The compiled files will be found under `/doc/compiled/*`.
// 
// ---
// Prerequisites: you need to have the required node packages installed.
//
//     npm install
// 
// ---
// Usage:
// 
//     $ git checkout gh-pages # make sure you're on the gh-pages branch
//     $ ./bin/generate-docs
//     $ [xdg-]open ./index.html
// 
// The script can be run in watch mode, where any modified sources will be
// properly re-compiled.
//
//     $ ./bin/generate-docs -w
//     
// Have fun.

var fs = require('fs');
var path = require('path');
var chokidar = require('chokidar');
var reactTools = require('react-tools');
var glob = require('glob');
var root = path.resolve(__dirname, '..');
var execSync = require('child_process').execSync;
var CONFIG;

if (execSync("git rev-parse --abbrev-ref HEAD").toString() !== "gh-pages\n") {
  throw new Error("You must be on the gh-pages branch to use this script.");
}

// Compile the JSX app found in doc/index.js
function compileApp() {
  console.log('Compiling app...');

  var source = fs.readFileSync(path.resolve(root, 'doc/index.js'), 'utf-8');
  var compiled = reactTools.transform(source, {
    harmony: true,
    stripTypes: true
  });

  fs.writeFileSync(path.resolve(root, CONFIG.outputDir, 'index.js'), compiled);

  console.log('App has been compiled.');
}

// Compile the doc database from .md files under doc/.
function compileDocs() {
  console.log("Generating the database...");

  var database = CONFIG.groups.map(function(group) {
    return {
      id: group.name,
      config: group,
      files: group.files.reduce(function(entries, filePaths) {
        glob.sync(filePaths).forEach(function(filePath) {
          // console.log("Adding", filePath, "to the documentation database.");

          entries.push({
            id: filePath,
            content: fs.readFileSync(filePath, 'utf-8')
          });
        });

        return entries;
      }, [])
    };
  });

  fs.writeFileSync(
    path.resolve(root, CONFIG.outputDir, 'database.js'),
    [
      "window.CONFIG=" + JSON.stringify(CONFIG) + ";",
      "window.DATABASE=" + JSON.stringify(database) + ";"
    ].join("\n")
  );

  console.log("Database compiled.");
}

// Read config and generate everything.
function main() {
  CONFIG = JSON.parse(
    fs.readFileSync(path.resolve(root, 'doc', 'config.json'), 'utf-8')
  );

  // Make sure the `doc/compiled` destination directory exists.
  if (!fs.existsSync(path.resolve(root, CONFIG.outputDir))) {
    fs.mkdirSync(path.resolve(root, CONFIG.outputDir));
  }

  compileApp();
  compileDocs();
}

if (process.argv.some(function(argv) { return argv.match(/\-w|\-\-watch/); })) {
  chokidar
    .watch('doc/index.js', { ignoreInitial: true })
    .on('all', compileApp)
  ;

  chokidar
    .watch('doc/**/*.md', { ignoreInitial: true })
    .on('all', compileDocs)
  ;

  chokidar
    .watch('doc/config.json', { ignoreInitial: true })
    .on('all', function() {
      console.log('Configuration changed, re-compiling...');
      main();
    })
  ;

  console.log('Watching for changes...');
}

main();
