window.CONFIG={"title":"YARD-API Reference","output":"public/doc","groups":[{"name":"YARD-API","sources":["README.md"]},{"name":"Tags","parse_titles":true,"sources":["doc/tags/*.md"]}],"asset_root":"doc/","assets":["index.html","index.css","vendor/*.js","vendor/*.css"]};
window.DATABASE=[{"id":"YARD-API","entries":[{"id":"README","content":"# yard-api\n\n[![Build Status](https://travis-ci.org/amireh/yard-api.png)](https://travis-ci.org/amireh/yard-api)\n\nTODO\n\n## Usage\n\nCheck out the tag usage pages in [https://amireh.github.io/yard-api].\n\n### Compatibility options\n\n#### `@argument` tags with names specified before types\n\nFor tags that have a type and a name such as the YARD `@attr` tag, or the yard-api `@argument` tag, the \"correct\" syntax is to specify the types *before* the name. For example:\n\n```ruby\n# @argument [String] name\n#   This is compliant with YARD syntax.\n#\n# @argument name [String]\n#   This is not compliant with YARD syntax.\n```\n\nIf your project already uses the (incorrect) second syntax and you would like to keep things that way, then you can use the compatibility option `leading_argument_name_fix` to have yard-api correctify this and understand both flavors.\n\n## Configuration\n\n`yard-api` will look for a file in `config/yard_api.yml` in the Rails root for customizations. Configuration fields not specified in that file will be filled with the default values found in [config/yard_api.yml](https://github.com/amireh/yard-api/blob/master/config/yard_api.yml).\n\nRead that file to view all the available options.\n\n## Notes\n\n- can only document classes and class methods; modules, root objects, and constants are ignored\n\n## Changelog\n\n**0.1.7**\n\n- new compatibility option `leading_argument_name_fix`\n\n**15/9/2014**\n\n- `@argument` tags can now be formatted in a table by setting the `tabular_arguments` option to true\n- `@argument_scope`: a new tag that improves the formatting of endpoint arguments that are scoped by a common prefix (e.g, nested inside a json object), like `user[name]` => `name`\n- `@argument` can now parse accepted values in two formats; inline within the types array, or by explicitly writing it in the tag text using any of `Accepted values: [...]`, `Accepts: [...]`, or `Possible values: [...]`\n- A new option: `strict_arguments` that provides a default for the `is_required` property of `@argument` tags. This default is used if the tag does not explicitly state `Optional` or `Required` in its type specifier.\n- Support for dynamic javascript and style code based on options. See `templates/layout/setup.rb#inline_{javascripts,stylesheets}`\n- A new set of options for customizing layout: `content_width`, `sidebar_width` and `spacer`\n- `github_url` and `github_branch` options for tuning api endpoint source links\n\n**14/9/2014**\n\n- Support for single-page output through the `one_file` option\n- Support for resource index generation (\"All Resources\") through the `resource_index` option\n\n**10/9/2014**\n\n- Support for github-flavored markdown when you're using Markdown as a markup, and `redcarpet` as the provider\n- Syntax highlighting for multiple languages (with auto-detection) using [highlight.js](https://highlightjs.org/)\n- `@example_response` and `@example_request` tags now support a title for the response\n- A new option: `copyright` for displaying a copyright in the footer of every page\n- A new option: `footer_note` for displaying a custom note, like linking to the project's source code, in the footer of every page\n\n## License\n\nReleased under the [AGPLv3](http://www.gnu.org/licenses/agpl-3.0.html) license."}]},{"id":"Tags","entries":[{"id":"@note","content":"# `@note`\n\n*TODO*\n"},{"id":"@example_request","content":"# `@example_request`\n\n*TODO*\n"},{"id":"@argument_scope","content":"# `@argument_scope`\n\n*TODO*"},{"id":"@model","content":"# `@model`\n\nThe `@model` tag allows you to describe an API data model."},{"id":"@argument","content":"# `@argument`\n\nThe `@argument` tag lets you describe a parameter your API endpoint accepts.\n\n## Basic\n\n### Syntax\n\n```ruby\n# @argument [TYPE_SPECIFIER] NAME\n#  Description.\n```\n\n### Example\n\n```ruby\nclass ShirtOrdersController < ApplicationController\n    # @argument [String] color\n    #  The color of the shirt.\n    def create()\n    end\nend\n```\n\n## With an \"allowed values\" enum\n\nIt is possible to specify what values are valid for this argument - this enum will be rendered in a special manner in the output.\n\n### Syntax\n\n```ruby\n# @argument [TYPE_SPECIFIER, [ALLOWED_VALUES]] NAME\n#  Description.\n```\n\n`ALLOWED_VALUES` should be a list of quoted strings, delimited by `,` or `|`.\n\n### Example\n\n```ruby\nclass ShirtOrdersController < ApplicationController\n    # @argument [String, [\"S\", \"M\", \"L\", \"XL\"]] size\n    #  The size of the shirt.\n    def create()\n    end\nend\n```\n\n## Specifying required/optional parameters\n\nPrepend the type specifier by either `Required` or `Optional` to mark the parameter as such.\n\nFor example, marking the `color` argument as required:\n\n```ruby\nclass ShirtOrdersController < ApplicationController\n    # @argument [Required, String] color\n    #  The color of the shirt.\n    def create()\n    end\nend\n```\n\nConversely, to mark that parameter as optional:\n\n```ruby\nclass ShirtOrdersController < ApplicationController\n    # @argument [Optional, String] color\n    #  The color of the shirt.\n    def create()\n    end\nend\n```\n\nThis functionality is affected by the `strict_arguments` option; if it is enabled, all arguments are assumed to be required, and you don't need to explicitly write `Required` in the `@argument` tag docstring. However, in that case, you must explicitly write `Optional` in the docstring to mark the parameter otherwise. And vice versa."},{"id":"@API","content":"# `@API`\n\nThe `@API` tag is what tells YARD-API that this object (controller or method) is relevant.\n\n> **Warning**\n> \n> This tag *MUST* be present on the API controller's `class` tag for it and \n> any of its methods to be parsed.\n\n## Examples\n\n### Documenting an API\n\n```ruby\n# @API Quizzes\n# \nclass Quizzes::QuizzesApiController < ApplicationController\n  # ...\nend\n```\n\n### Documenting an API endpoint\n\n```ruby\n\n  # @API List quizzes in a course\n  #\n  # Returns the list of Quizzes in this course.\n  #\n  # @argument search_term [String]\n  #   The partial title of the quizzes to match and return.\n  #\n  # @example_request\n  #     curl https://<canvas>/api/v1/courses/<course_id>/quizzes \\ \n  #          -H 'Authorization: Bearer <token>'\n  #\n  # @returns [Quiz]\n  def index\n    # ...\n  end\n```"},{"id":"@object","content":"# `@object`\n\n*TODO*\n"},{"id":"@beta","content":"# `@beta`\n\nThis tag marks the API or an endpoint as *beta* informing the user that it is subject to change.\n\nExample:\n\n```ruby\n# @API Reorder quiz items\n# @beta\n#\n# Change order of the quiz questions or groups within the quiz\ndef reorder\nend\n```"},{"id":"@request_field","content":"# `@request_field`\n\n*TODO*\n"},{"id":"@response_field","content":"# `@response_field`\n\n*TODO*\n"},{"id":"@returns","content":"# `@returns`\n\nThis tag describes an [*API data model*](#Tags/@model) that it outputs on successful response."},{"id":"@subtopic","content":"# `@subtopic`\n\n*TODO*\n"},{"id":"@example_response","content":"# `@example_response`\n\n*TODO*\n"},{"id":"@throws","content":"# `@throws`\n\n*TODO*\n"},{"id":"@internal","content":"# `@internal`\n\n*TODO*\n"},{"id":"@no_content","content":"# `@no_content`\n\n*TODO*\n"},{"id":"@warning","content":"# `@warning`\n\n*TODO*\n"}]}];