---
# config/yard_api.yml
output: public/doc/api
readme: doc/api/README.md

# Title of the project. This will be displayed in the browser title bar as well
# as in the layout as the primary heading.
title: Rails API Project

# The resource index is a mega-index page that contains all the API resources.
resource_index: true

# Generate a single page that contains all the static pages and API resources.
# The output will be a single file.
#
# Implies "resource_index" is true.
one_file: false

# YARD options passed as-is.
#
# If you want to use github-flavored markdown, use "redcparet" as a markup
# provider, and "markdown" as a markup and add the following gems to your
# Gemfile *before* yard-api:
#
#   - "github-markup"
#   - "redcarpet"
markup:
markup_provider:

# The API files to extract the docs from.
files:
  - app/controllers/**/*.rb

route_namespace:

# YARD assets that you want to reference from your docs. The key is the
# reference key you use in the docs, while the value is the path to where
# the assets are located relative to the doc source.
#
# These folders will be copied to the output directory.
#
# See "source" and "output".
assets:
  # images: images
  # examples: examples

# Debug option. YARD and YARD-API verbosity option.
verbose: true

# Debug option, will write *a lot* of stuff to STDOUT while generating.
debug: false

# Don't tolerate any errors such as bad asset paths, invalid tag properties, etc.
strict: false

# Each API endpoint details can provide a link to the source code of the
# controller method if it's available on GitHub.
#
# Just specify the url to your repository and the branch the documentation has
# been generated for and things "should work".
# 
# Example: https://github.com/amireh/yard-api
github_url:
github_branch: master

# Set to true if you want @argument tags to show up in a table instead of a list.
tabular_arguments: false

# When this option is set, all @argument tags that do not explicitly specify
# whether they are required or optional will be marked as required. Examples:
#
#   - @argument [String] name # assumed to be required
#   - @argument [Optional, String] name # is now optional
#   - @argument [Required, String] name # same effect if `strict_arguments` is true
#
# Conversely, leaving this to false marks all arguments with no specifier as
# optional.
strict_arguments: true

# Width of the sidebar, in pixels.
sidebar_width: 240

# Width of the content box in pixels, or "fluid" for maximum screen space.
#
# Content will never overlap with the sidebar.
content_width: "fluid"

# Whitespace between the Sidebar and the content, in pixels.
spacer: 20

# Compatibility option.
#
# If your project (mis)uses the @argument tag to specify the name before the
# types, e.g `@argument name [String]`, then turn this on and yard-api will
# make these docstrings compliant with YARD's @attr tag (or any tag with a name
# and a type, really) which is what @argument uses as its back-end tag.
#
# The "right" thing to do is to use the correct YARD syntax:
#
#   @argument [Type specifier] name_specifier
#
# But that may not be viable in very large, existing projects.
leading_argument_name_fix: false

use_beta_flag: true
use_beta_banner: false