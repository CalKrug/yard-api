window.CONFIG={"title":"YARD-API Reference","outputDir":"doc/compiled","groups":[{"name":"YARD-API","files":["README.md","doc/articles/JSON_objects.md"],"parse_titles":true},{"name":"Tags","parse_titles":true,"files":["doc/tags/*.md"]}]};
window.DATABASE=[{"id":"YARD-API","config":{"name":"YARD-API","files":["README.md","doc/articles/JSON_objects.md"],"parse_titles":true},"files":[{"id":"README.md","content":"# yard-api\n\n[![Build Status](https://travis-ci.org/amireh/yard-api.png)](https://travis-ci.org/amireh/yard-api)\n\n## Usage\n\nSee [https://amireh.github.io/yard-api].\n\n### Compatibility options\n\n#### `@argument` tags with names specified before types\n\nFor tags that have a type and a name such as the YARD `@attr` tag, or the yard-api `@argument` tag, the \"correct\" syntax is to specify the types *before* the name. For example:\n\n```ruby\n# @argument [String] name\n#   This is compliant with YARD syntax.\n#\n# @argument name [String]\n#   This is not compliant with YARD syntax.\n```\n\nIf your project already uses the (incorrect) second syntax and you would like to keep things that way, then you can use the compatibility option `leading_argument_name_fix` to have yard-api correctify this and understand both flavors.\n\n## Configuration\n\n`yard-api` will look for a file in `config/yard_api.yml` in the Rails root for customizations. Configuration fields not specified in that file will be filled with the default values found in [config/yard_api.yml](https://github.com/amireh/yard-api/blob/master/config/yard_api.yml).\n\nRead that file to view all the available options.\n\n## Notes\n\n- can only document classes and class methods; modules, root objects, and constants are ignored\n\n## Generating the docs for YARD-API\n\n1. go to the `gh-pages` branch, check it out if you haven't\n2. run `bin/generate-docs`\n3. browse `index.html`\n\n## Changelog\n\n**30/7/2015 [0.3.1]**\n\n- Fixed a bug that was listing all the endpoints of a certain controller even if they do not have a route defined. Now, YARD-API will warn about endpoints that have an `@API` tag but could not be routed.\n- Greatly improved the performance of generating the Quicklinks table.\n\n**29/7/2015 [0.3.0]**\n\n- major rework of the linking logic, much improvements but some stuff is broken now\n\n**28/7/2015 [0.2.3]**\n\n- dropped the `@argument_scope` tag\n- JSON is available as an output format now\n- added usage documentation, found at [http://amireh.github.io/yard-api]\n- added an example app\n- various style improvements\n- `@example_request` is now able to output a sample cURL command.\n\n**0.1.7**\n\n- new compatibility option `leading_argument_name_fix`\n\n**15/9/2014**\n\n- `@argument` tags can now be formatted in a table by setting the `tabular_arguments` option to true\n- `@argument_scope`: a new tag that improves the formatting of endpoint arguments that are scoped by a common prefix (e.g, nested inside a json object), like `user[name]` => `name`\n- `@argument` can now parse accepted values in two formats; inline within the types array, or by explicitly writing it in the tag text using any of `Accepted values: [...]`, `Accepts: [...]`, or `Possible values: [...]`\n- A new option: `strict_arguments` that provides a default for the `is_required` property of `@argument` tags. This default is used if the tag does not explicitly state `Optional` or `Required` in its type specifier.\n- Support for dynamic javascript and style code based on options. See `templates/layout/setup.rb#inline_{javascripts,stylesheets}`\n- A new set of options for customizing layout: `content_width`, `sidebar_width` and `spacer`\n- `github_url` and `github_branch` options for tuning api endpoint source links\n\n**14/9/2014**\n\n- Support for single-page output through the `one_file` option\n- Support for resource index generation (\"All Resources\") through the `resource_index` option\n\n**10/9/2014**\n\n- Support for github-flavored markdown when you're using Markdown as a markup, and `redcarpet` as the provider\n- Syntax highlighting for multiple languages (with auto-detection) using [highlight.js](https://highlightjs.org/)\n- `@example_response` and `@example_request` tags now support a title for the response\n- A new option: `copyright` for displaying a copyright in the footer of every page\n- A new option: `footer_note` for displaying a custom note, like linking to the project's source code, in the footer of every page\n\n## License\n\nReleased under the [AGPLv3](http://www.gnu.org/licenses/agpl-3.0.html) license."},{"id":"doc/articles/JSON_objects.md","content":"# JSON Objects\n\nWhen a tag supports embedding any JSON object, it *has* to be valid JSON. You can use tools like [JSONEditor](http://jsoneditoronline.org/) to validate your JSON blobs, or any JSON linter really.\n\nYARD-API will not accept invalid JSON; it will either bail if `strict` mode is turned on, or will simply ignore the object otherwise. The output will include a warning in either case.\n\n## Linking to JSON objects\n\nIt is possible to link to other API objects (defined by the [`@object`](#Tags/doc/tags/object.md) tag) by using the following notation:\n\n`{api:CONTROLLER_ID:OBJECT_ID}`\n\nFor example, to link to the object defined in the example below, we'll use `{api:Quizzes:QuizPermissions}`:\n\n```ruby\n# @API Quizzes\n#\n# @object QuizPermissions\n#   {\n#     \"read\": {\n#       \"description\": \"whether the user can view the quiz\",\n#       \"example\": true,\n#       \"type\": \"boolean\"\n#     },\n#     \"submit\": {\n#       \"description\": \"whether the user may submit a submission for the quiz\",\n#       \"example\": true,\n#       \"type\": \"boolean\"\n#     }\n#   }\n#\nclass QuizzesController < ApplicationController\n  # @API Retrieve your active permissions\n  # \n  # @returns {QuizPermissions}\n  def get_permissions\n  end\nend\n```\n\nAnd if you want to reference an object defined in a different controller:\n\n```ruby\nclass QuizExtensionsController < ApplicationController\n  # @API Retrieve all available permissions\n  # \n  # @returns {api:Quizzes:QuizPermissions[]}\n  def index\n  end\nend\n```"}]},{"id":"Tags","config":{"name":"Tags","parse_titles":true,"files":["doc/tags/*.md"]},"files":[{"id":"doc/tags/API.md","content":"# `@API`\n\nThe `@API` tag is what tells YARD-API that this object (controller or method) is relevant.\n\n> **Warning**\n> \n> This tag *MUST* be present on the API controller's `class` tag for it and \n> any of its methods to be parsed.\n\n## Examples\n\n### Documenting an API\n\n```ruby\n# @API Quizzes\n# \nclass Quizzes::QuizzesApiController < ApplicationController\n  # ...\nend\n```\n\n### Documenting an API endpoint\n\n```ruby\n# @API List quizzes in a course\n#\n# Returns the list of Quizzes in this course.\n#\n# @argument search_term [String]\n#   The partial title of the quizzes to match and return.\n#\n# @example_request\n#     curl https://<canvas>/api/v1/courses/<course_id>/quizzes \\ \n#          -H 'Authorization: Bearer <token>'\n#\n# @returns [Quiz]\ndef index\n  # ...\nend\n```"},{"id":"doc/tags/argument_scope.md","content":"# `@argument_scope`\n\n**DEPRECATED, DO NOT USE**"},{"id":"doc/tags/argument.md","content":"# `@argument`\n\nThe `@argument` tag lets you describe a parameter your API endpoint accepts.\n\n## Basic\n\n### Syntax\n\n```ruby\n# @argument [TYPE_SPECIFIER] NAME\n#  Description.\n```\n\n### Example\n\n```ruby\nclass ShirtOrdersController < ApplicationController\n    # @argument [String] color\n    #  The color of the shirt.\n    def create()\n    end\nend\n```\n\n## With an \"allowed values\" enum\n\nIt is possible to specify what values are valid for this argument - this enum will be rendered in a special manner in the output.\n\n### Syntax\n\n```ruby\n# @argument [TYPE_SPECIFIER, [ALLOWED_VALUES]] NAME\n#  Description.\n```\n\n`ALLOWED_VALUES` should be a list of quoted strings, delimited by `,` or `|`.\n\n### Example\n\n```ruby\nclass ShirtOrdersController < ApplicationController\n    # @argument [String, [\"S\", \"M\", \"L\", \"XL\"]] size\n    #  The size of the shirt.\n    def create()\n    end\nend\n```\n\n## Specifying required/optional parameters\n\nPrepend the type specifier by either `Required` or `Optional` to mark the parameter as such.\n\nFor example, marking the `color` argument as required:\n\n```ruby\nclass ShirtOrdersController < ApplicationController\n    # @argument [Required, String] color\n    #  The color of the shirt.\n    def create()\n    end\nend\n```\n\nConversely, to mark that parameter as optional:\n\n```ruby\nclass ShirtOrdersController < ApplicationController\n    # @argument [Optional, String] color\n    #  The color of the shirt.\n    def create()\n    end\nend\n```\n\nThis functionality is affected by the `strict_arguments` option; if it is enabled, all arguments are assumed to be required, and you don't need to explicitly write `Required` in the `@argument` tag docstring. However, in that case, you must explicitly write `Optional` in the docstring to mark the parameter otherwise. And vice versa."},{"id":"doc/tags/beta.md","content":"# `@beta`\n\nThis tag marks the API or an endpoint as *beta* informing the user that it is subject to change.\n\nExample:\n\n```ruby\n# @API Reorder quiz items\n# @beta\n#\n# Change order of the quiz questions or groups within the quiz\ndef reorder\nend\n```\n\nThe UI can display either a non-obtrusive \"BETA\" marker next to the endpoint's API text, or can display a full banner below the endpoint's route that is more clear but is obviously obtrusive.\n\nSee the options `use_beta_flag` and `use_beta_banner`."},{"id":"doc/tags/example_request.md","content":"# `@example_request`\n\nThis is an endpoint-only tag. This tag lets you write the (usually JSON) payload that the endpoint accepts. YARD-API will generate example requests that use this payload and hit this endpoint that the user can use (or at least, start with.)\n\n## Syntax\n\n```ruby\n# @example_request [optional brief title]\n#  [PAYLOAD]\n```\n\n## Basic usage example\n\nThis shows an example request that highlights how the objects are passed.\n\n```ruby\n# @API Quiz session extensions\nclass Quizzes::QuizExtensionsController < ApplicationController\n  # @API Set extensions for student quiz submissions\n  #\n  # @example_request\n  #  {\n  #    \"quiz_extensions\": [{\n  #      \"user_id\": 3,\n  #      \"extra_attempts\": 2,\n  #      \"extra_time\": 20,\n  #      \"manually_unlocked\": true\n  #    },{\n  #      \"user_id\": 2,\n  #      \"extra_attempts\": 2,\n  #      \"extra_time\": 20,\n  #      \"manually_unlocked\": false\n  #    }]\n  #  }\n  #\n  # @example_request Extending the student's session by 30 more minutes.\n  #  {\n  #    \"quiz_extensions\": [{\n  #      \"user_id\": 3,\n  #      \"extend_from_now\": 20\n  #    }]\n  #  }\n  #\n  def create\n  end\n```\n\nIt is sometimes useful to provide a short title that describes what the example request does. This is particularly so when you have more than one example request provided.\n\nBuilding upon the previous example, we'll add another example and this time we'll title both requests:\n\n```ruby\n# @API Quiz session extensions\nclass Quizzes::QuizExtensionsController < ApplicationController\n  # @API Set extensions for student quiz submissions\n  #\n  # @example_request Managing multiple student sessions and unlocking one of them.\n  #  {\n  #    \"quiz_extensions\": [{\n  #      \"user_id\": 3,\n  #      \"extra_attempts\": 2,\n  #      \"extra_time\": 20,\n  #      \"manually_unlocked\": true\n  #    },{\n  #      \"user_id\": 2,\n  #      \"extra_attempts\": 2,\n  #      \"extra_time\": 20,\n  #      \"manually_unlocked\": false\n  #    }]\n  #  }\n  #\n  # @example_request Extending the student's session by 30 more minutes.\n  #  {\n  #    \"quiz_extensions\": [{\n  #      \"user_id\": 3,\n  #      \"extend_from_now\": 20\n  #    }]\n  #  }\n  #\n  def create\n  end\n```\n"},{"id":"doc/tags/example_response.md","content":"# `@example_response`\n\nJust like [`@example_request`](#Tags/doc/tags/example_request.md), this tag can be used to display a JSON output from the endpoint. You can write a short title to describe what (or when) this payload is sent back from the server.\n\n## Syntax\n\n```ruby\n# @example_response [optional brief title]\n#  [PAYLOAD]\n```\n\nWhere `[PAYLOAD]` is a [valid JSON object](#/API/JSON_objects.md).\n\n"},{"id":"doc/tags/internal.md","content":"# `@internal`\n\nMark an object to be _internal_ so that it does not show up in the API docs. This is equivalent to not defining an `@API` tag on the object.\n\n\n## Example\n\n```ruby\n  # @API Quizzes\n  class QuizzesController\n    # @API Retrieve all quizzes\n    # \n    # This will show up.\n    def index\n    end\n\n    # @API Remove a quiz.\n    # @internal\n    # \n    # This will NOT show up.\n    def destroy\n    end\n  end\n```"},{"id":"doc/tags/model.md","content":"# `@model`\n\n**DEPRECATED**: please use [`@object`](#Tags/doc/tags/object.md) instead."},{"id":"doc/tags/no_content.md","content":"# `@no_content`\n\nUse this tag if the endpoint does not produce any output (usually, `HTTP 204 No Content` is returned.)\n\n## Syntax\n\n```ruby\n# @no_content\n```\n"},{"id":"doc/tags/note.md","content":"# `@note`\n\nThis is similar to the [`@warning`](#Tags/doc/tags/warning.md) tag; it can be used to display text (usually subsidiary) in a specially-formatted box that will not interrupt the user's current reading flow.\n\n## Syntax\n\n```ruby\n# @note\n#   Your note.\n```\n\n## Example\n\n```ruby\n# @API Shirts\nclass ShirtOrdersController < ApplicationController\n  # @API Order a new shirt\n  # \n  # Create a shirt order and have it delivered to your doorstep.\n  # \n  # @note\n  #  All our shirts are knit by oragnic-eating knitters.\n  #\n  def create\n  end\nend\n```\n"},{"id":"doc/tags/object.md","content":"# `@object`\n\nThis tag allows you to define and describe an API _data object_, which would be any structured output from an API endpoint. Usually, these objects are shared across several endpoints, like creating a quiz, updating it, and retrieving it would all require and yield the same data object.\n\n## Syntax\n\nWe use JSON to describe the object, and there are two notations for doing this which are described below.\n\n### Format A: Swagger-style (recommended)\n\nThis style requires you to describe several items in every property of the object, like what it is, what type of data it contains, and an example value.\n\nCurrently, the recognized property items by YARD-API are:\n\n- `description` - a full description of the property\n- `type` - the data the of the property, like `Boolean` or `String`\n- `example` - an example value(s) the property may contain\n- `accepted_values` - an array of possible values the property can contain\n- `required` - a boolean indicating whether this property is required (in either input or output scenarios)\n\nTechnically, they are all optional, but obviously that's not very helpful. At least, you should define a `type` and a `description` for every property.\n\n```json\n  // The ID of the object has to be unique inside the controller's scope,\n  // and across the entire app's scope if you want to use a shortcut link\n  // to it (like {API::Object} instead of {API::Controller::Object}).\n  \"id\": \"Unique ID of the object\",\n  \"description\": \"A brief, or long, description of this object.\",\n  \"properties\": {\n    // ...\n    // Property definitions go here. Refer to the examples for more.\n  }\n```\n\nThe examples below will show you how to utilize these items.\n\n### Format B: POJO\n\nThis format is much easier but less powerful. We'll use POJOs (plain-old-JSON-objects) to list the object's properties, and regular JavaScript comments to describe them.\n\n```json\n{\n  // You would write the description of prop1 here.\n  \"prop1\": \"an example value\",\n  // And prop2 here, etc.\n  \"prop2\": true,\n  \"prop3\": 5.25,\n  // ...\n  \"propN\": null\n}\n```\n\nNote that it is not possible to write an object's description in this format.\n\n## Examples\n\n### Swagger style\n\n```ruby\n{\n  \"id\": \"Shirt\",\n  \"description\": \"A real T-Shirt.\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"String\"\n    },\n    \"color\": {\n      \"description\": \"Color of the shirt.\",\n      \"type\": \"String\"\n    },\n    \"size\": {\n      \"type\": \"String\",\n      \"description\": \"Size of the shirt.\",\n      \"accepted_values\": [ \"S\", \"M\", \"L\", \"XL\" ],\n      \"required\": true\n    }\n  }\n}\n```\n\n### POJO style\n\n```json\n{\n  // The unique ID of this shirt. This is always a string.\n  \"id\": \"1\",\n\n  // The color of the shirt.\n  \"color\": \"red\",\n\n  // The size of the shirt.\n  // \n  // This is a required property when POSTing, and is always present.\n  // \n  // Accepted values: \"S\", \"M\", \"L\", and \"XL\"\n  \"size\": \"M\"\n}\n```"},{"id":"doc/tags/request_field.md","content":"# `@request_field`\n\n**DEPRECATED**: please use [`@argument`](#Tags/doc/tags/argument.md) instead."},{"id":"doc/tags/response_field.md","content":"# `@response_field`\n\n*TODO*\n"},{"id":"doc/tags/returns.md","content":"# `@returns`\n\nThis tag describes an [*API data object*](#Tags/doc/tags/object.md) that it outputs on successful response.\n\n## Syntax\n\n```ruby\n# @returns {API::OBJECT_PATH}   ||\n# @returns {API::OBJECT_PATH[]}\n```\n\nThe former denotes returning a single object, while the latter an array of them.\n\n## Examples\n\n```ruby\n# @API Quiz Permissions\n# \n# Manage and update an author's quiz permissions.\n# \n# @object PermissionSet\n#   {\n#     \"read\": {\n#       \"description\": \"whether the user can view the quiz\",\n#       \"example\": true,\n#       \"type\": \"boolean\"\n#     },\n#     \"update\": {\n#       \"description\": \"whether the user may update the quiz\",\n#       \"example\": true,\n#       \"type\": \"boolean\"\n#     }\n#   }\n#\nclass QuizzesController < ApplicationController\n  # @API Retrieve your active permissions\n  # \n  # @returns {API::QuizPermissions::PermissionSet[]}\n  def index\n  end\n\n  # @API Retrieve a single permission record\n  # \n  # @returns {API::QuizPermissions::PermissionSet}\n  def show\n  end\n```"},{"id":"doc/tags/throws.md","content":"# `@throws`\n\nThis tag lets you specify **error messages** that could be thrown by this endpoint on failure.\n\n## Syntax\n\n```ruby\n# @throws\n#   {\n#     \"message\": \"the error message that will be output by the API\",\n#     \"reason\": \"optional explanation of why this error is thrown\"\n#   }\n```\n\n## Example\n\n```ruby\n# @API Users\nclass UsersController < ApplicationController\n  # @API Sign up\n  #\n  # Create a new account.\n  #\n  # @argument [String] name\n  #  Your full name.\n  #  \n  # @argument [String] email\n  #  Your email.\n  #  \n  # @argument [String] password\n  #  Your password.\n  #  \n  # @throws \n  #   { \"message\": \"We need your name.\",\n  #     \"reason\": \"Name is blank.\" }\n  #   \n  # @throws \n  #   { \"message\": \"We need your email address.\",\n  #     \"reason\": \"Email is blank.\" }\n  #     \n  # @throws \n  #   { \"message\": \"You must provide a password.\",\n  #     \"reason\": \"Password is blank.\"\n  #   }\n  #   \n  # @throws\n  #   { \"message\": \"Password is too short, it must be at least 7 characters long.\" }\n  # \n  # @throws \n  #   { \"message\": \"There's already an account registered to this email address.\" }\n  #\n  def create\n  end\n```"},{"id":"doc/tags/warning.md","content":"# `@warning`\n\nThis tag renders as a text block that calls for attention. Use it when there's important information the API user needs to know about.\n\n## Syntax\n\n```ruby\n# @warning\n#   WARNING_MESSAGE.\n```\n\n## Example\n\n```ruby\n# @API Shirts\nclass ShirtOrdersController < ApplicationController\n  # @API Order a new shirt\n  # \n  # Create a shirt order and have it delivered to your doorstep.\n  # \n  # @warning\n  #  Please note that according to our fair-usage policy, should you\n  #  not be present at the time of delivery, the delivery-man is\n  #  hereby authorized to wear it instead.\n  #\n  def create\n  end\nend\n```\n"}]}];